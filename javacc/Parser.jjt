options
{
    LOOKAHEAD = 1;
    MULTI = true;
}

PARSER_BEGIN(Parser)

import pt.up.fe.comp.jmm.report.Report;
import pt.up.fe.comp.jmm.report.ReportType;
import pt.up.fe.comp.jmm.report.Stage;
import java.util.ArrayList;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t" | "\n"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN:
{
    <IMPORT: "import">
    | <STATIC: "static">
    | <DOT: ".">
    | <STAR: "*">
    | <SEMICOLON: ";">
    | <COMMA: ",">
    | <CLASS: "class">
    | <EXTENDS: "extends">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <PUBLIC: "public">
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <RETURN: "return">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRINGARR: "String[]">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <ASSIGN: "=">
    | <LBRACKET: "[">
    | <RBRACKET: "]">
    | <SC_AND: "&&">
    | <LESS: "<">
    | <PLUS: "+">
    | <MINUS: "-">
    | <SLASH: "/">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <BANG: "!">
    | <LENGTH: "length">
    | <IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])* >
    | <NUMERIC: (["0"-"9"])+ >
}

SimpleNode Program() : {}
{
    ( ImportDeclaration() )* ClassDeclaration() <EOF> {

    if (token_source.errors>= 1) {
        for(Report r : token_source.syntacticErrors) {
          System.out.println(r.toString());
        }
        throw new ParseException(token_source.errors + " Errors found in the execution of the program");
    }
    else
        return jjtThis;
    }
}


void ImportDeclaration() #Import : {}
{
    <IMPORT> Name() <SEMICOLON>
}

/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
void Name() #void : {}
{
    Identifier() (LOOKAHEAD(2) <DOT> Identifier() )*
}

void ClassDeclaration() #Class : {Token t, s;}
{
    <CLASS>
    t=<IDENTIFIER> {jjtThis.value = t.image; jjtThis.put("name", t.image);}
    (<EXTENDS> s=<IDENTIFIER> {jjtThis.value = s.image; jjtThis.put("extends", s.image);} #Extends)?
    <LBRACE>
    (VarDeclaration() <SEMICOLON>)*
    (MethodDeclaration())*
    <RBRACE>
}

void VarDeclaration() : {}
{
    Type() Identifier()
}

void MethodDeclaration() #Method : {Token t;}
{
    <PUBLIC>
    (
        Type()
        t=<IDENTIFIER> {jjtThis.value = t.image;}
        <LPAREN>
        (
            VarDeclaration()
            (
                <COMMA> VarDeclaration()
            )*
        )? #ParamList
        <RPAREN>
        <LBRACE>
        MethodDeclarationBody()
        <RETURN> Expression() <SEMICOLON>  #Return
        <RBRACE>
    |
         <STATIC>
         <VOID>
         t=<MAIN> {jjtThis.value = t.image;}
         <LPAREN>
         t=<STRINGARR> {jjtThis.value = t.image;}
         Identifier()
         <RPAREN>
         <LBRACE>
         MethodDeclarationBody()
         <RBRACE>
    )
}

void Identifier() #Identifier : { Token t; }
{
    t = <IDENTIFIER> {jjtThis.value = t.image; jjtThis.put("name", t.image);}
}

void MethodDeclarationBody() #void : {}
{
    (BlockStatement())*
}

void BlockStatement() #void: {}
{
    LOOKAHEAD(2)
    LocalVariableDeclaration()
    |
    Statement()
}

void LocalVariableDeclaration() : {}
{
    Type() VariableDeclarator() (<COMMA> VariableDeclarator())* <SEMICOLON>
}

void Type() #void: {Token t;}
{
    Identifier() #Type
    |
    PrimitiveType() // "int", "[", "]", "boolean", "int"
}

void PrimitiveType() : {Token t; Boolean b = false;}
{
    t = <BOOLEAN> {jjtThis.value = t.image; jjtThis.put("type", t.image);}
    |
    (
        t = <INT> (<LBRACKET> <RBRACKET> {b = true;})? {
            if(b) {
                jjtThis.value = t.image + "[]"; // int[]
                jjtThis.put("type", t.image + "[]");
            }
            else {
                jjtThis.value = t.image; // int
                jjtThis.put("type", t.image);
            }
        }
    )
}

void VariableDeclarator() #void : {}
{
    VariableDeclaratorId() [<ASSIGN> VariableInitializer()]
}

void VariableDeclaratorId() #void : {Token t;}
{
    Identifier() (<LBRACKET> <RBRACKET>)*
}

void VariableInitializer() : {}
{
    ArrayInitializer()
    |
    Expression()
}

void ArrayInitializer() : {}
{
    <LBRACE> [VariableInitializer() (LOOKAHEAD(2) <COMMA> VariableInitializer())*][<COMMA>] <RBRACE>
}

void Expression() #void : {}
{
    ConditionalAndExpression()
}

void ConditionalAndExpression() #void : {}
{
    RelationalExpression() (<SC_AND> RelationalExpression() #And(2))*
}

void RelationalExpression() #void : {}
{
    AdditiveExpression() (<LESS> AdditiveExpression() #Less(2))*
}

void AdditiveExpression() #void : {Token t;}
{

    MultiplicativeExpression() ((t=<PLUS> | t=<MINUS>) MultiplicativeExpression() {jjtThis.value = t.image; jjtThis.put("operation", t.image);} #AdditiveExpression(2))*
}

void MultiplicativeExpression() #void : {Token t;}
{
    UnaryExpressionNotPlusMinus() ((t=<STAR> | t=<SLASH>) UnaryExpressionNotPlusMinus() {jjtThis.value = t.image; jjtThis.put("operation", t.image);} #MultiplicativeExpression(2))*
}

void UnaryExpressionNotPlusMinus() #void : {}
{
    <BANG> UnaryExpressionNotPlusMinus() #Not(1)
    |
    PrimaryExpression()
}

void PrimaryExpression() #void : {}
{
    PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() #void : {}
{
    Literal()
    |
    <THIS> #This
    |
    <LPAREN> Expression() <RPAREN>
    |
    AllocationExpression()
}

void PrimarySuffix() : {Token t; Token s;}
{
    LOOKAHEAD(2)
    t=<DOT> {jjtThis.value = t.image; jjtThis.put("attribute", t.image);} Identifier()
    |
    <LBRACKET> Expression() <RBRACKET>
    |
    t=<DOT> {jjtThis.value = t.image; jjtThis.put("attribute", t.image);} s=<LENGTH> {jjtThis.value = s.image; jjtThis.put("attribute", s.image);}
    |
    Arguments()
}

void Literal() #void : {Token t;}
{
    t=<NUMERIC> {jjtThis.value = Integer.valueOf(t.image); jjtThis.put("value", t.image);} #Numeric
    |
    t=<IDENTIFIER> {jjtThis.value = t.image; jjtThis.put("value", t.image);} #Identifier
    |
    BooleanLiteral()
}

void BooleanLiteral() #Boolean : {Token t;}
{
    t=<TRUE> {jjtThis.value = Boolean.valueOf(t.image); jjtThis.put("value", t.image);}
    |
    t=<FALSE> {jjtThis.value = Boolean.valueOf(t.image); jjtThis.put("value", t.image);}
}

void Arguments() #void : {}
{
    <LPAREN> [ArgumentList()] <RPAREN>
}

void ArgumentList() : {}
{
    Expression() (<COMMA> Expression())*
}

void AllocationExpression() #void : {Token t;}
{
    <NEW>
    (
        t=<INT> InsideArray() {jjtThis.value = t.image + "[]";}
        |
        t=<IDENTIFIER> <LPAREN> <RPAREN> {jjtThis.value = t.image;} #Identifier
    ) #New
}

void InsideArray() #Array : {}
{
    <LBRACKET> Expression() <RBRACKET>
}

void Statement() #void : {}
{
    IfStatement()
    |
    WhileStatement()
    |
    ( LOOKAHEAD(2)
        IdentifierStatement()
        |
        Expression() <SEMICOLON>
    )
    |
    <LBRACE> (Statement())* <RBRACE>
}

void IfStatement() : {}
{
    <IF> <LPAREN> Expression() #Condition <RPAREN> Statement()
    <ELSE> Statement()
}

void WhileStatement() #While : {}
{
   <WHILE> WhileCondition() Statement()
}

void WhileCondition() #Condition : {}
{
  try {
    <LPAREN> Expression() <RPAREN>}
    catch (ParseException e)
        {
            Report error = new Report(ReportType.ERROR,Stage.SYNTATIC,e.currentToken.beginLine,"Encountered \"" + e.currentToken.image+ "\", column " + e.currentToken.beginColumn + ".");
            token_source.syntacticErrors.add(error);

            token_source.errors ++;
            //System.out.println("ParseException Error: Encountered \""+ e.currentToken.image+ "\" at line "+ e.currentToken.beginLine+", column " + e.currentToken.beginColumn + ".");

            Token t = getToken(0);
            // Advances while there are no 2 ")" in a row or if the following character is not a "{"
            while (true) {
                if (t.kind == RPAREN && getToken(1).kind != RPAREN) {
                    break;
                }
                else if (getToken(1).kind == LBRACE){
                    break;
                }

                t = getNextToken();
            }

            if (token_source.errors>= 10) {
                for(Report r : token_source.syntacticErrors) {
                   System.out.println(r.toString());
                }
                throw new ParseException("Ten errors were found. Program terminated.");
            }
        }
}

void IdentifierStatement()  : {} // Identifier, "=", Expression, ";" | Identifier, "[", Expression, "]", "=", Expression, ";" | Expression, ";"
{
    Identifier() AfterIdentifier() <SEMICOLON>
}

void AfterIdentifier(): {Token t;}
{
    t=<ASSIGN>  Expression() {jjtThis.value = t.image;}
    |
    InsideArray() <ASSIGN> Expression()
}



TOKEN_MGR_DECLS : {
    int errors = 0;
    ArrayList<Report> syntacticErrors =  new ArrayList<Report>();
}

JAVACODE
void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object
  System.out.println("ParseException: Encountered \""+ e.currentToken.image+ "\" at line "+ e.currentToken.beginLine+", column " + e.currentToken.beginColumn + ".");
  Token t;

  if(token_source.errors==10){System.out.println("10 errors found, stopping program!"); System.exit(-1);}
  do {
      t = getNextToken();
  } while (t.kind != kind);
  /*
  do {
    getNextToken();
    t = getToken(1);
  }
  while (t.kind != kind);*/
}