import MathUtils.random;

import MiniGameAux.state;
import MiniGameAux.input;
import MiniGameAux.result;
import MiniGameAux.winning;
import MiniGameAux.loosing;
import MiniGameAux.colors;

class MiniGame {
    public static void main(String[] args){
        MiniGame minigame;
        minigame = new MiniGame();
        minigame.start();
    }

    public int start(){
        boolean play;
        boolean out;
        int[] res;
        int num_attempts;
        num_attempts = 15;

        int[] yourCode;

        MiniGameAux.state();

        yourCode = this.codeGenerator();

        out = false;
        int[] userInput;

        while(!out && (0 < num_attempts)){
            userInput = MiniGameAux.input(yourCode.length);

            res = this.generateFinal(yourCode, userInput);

            if(this.equal(res[0], yourCode.length)){
                out = true;
            }else{
                MiniGameAux.result(res);
            }
            if(!out)
                num_attempts = num_attempts-1;
            else{}
        }

        if(0 < num_attempts){
            MiniGameAux.winning();
        }else{
            MiniGameAux.loosing();
        }
        return 0;
    }

    public int[] codeGenerator() {

        int index;
        int i;

        int numT;
        numT = 4;

        int[] res;
        res = new int[numT];

        int numColors;
        numColors = MiniGameAux.colors();

        i = 0;

        while(i<numT){
            index = MathUtils.random(0, numColors-1);
            res[i] = index;
            i = i+1;
        }
        return res;
    }

    public boolean equal(int x, int y){
        boolean ret;
        ret = true;
        if(x < y){
            ret = false;
        }else {}
        if(y < x){
            ret = false;
        }else{}
        return ret;
    }


    public int[] generateFinal(int[] code, int[] nums) {
        int[] numbers;
        numbers = new int[4];
        int i;
        int redT;
        int blueT;
        boolean _continue;
        int j;
        int[] res;

        int[] codeAux;
        codeAux = new int[4];

        i = 0;
        while(i < 4){
            codeAux[i] = code[i];
            numbers[i] = nums[i];
            i = i + 1;
        }

        redT = 0;
        i = 0;

        while(i < code.length) {
            if (this.equal(codeAux[i],numbers[i])) {
                redT = i+1;
                codeAux[i] = 0-1;
                numbers[i] = 0-1;
            }else{}
            i = i+1;
        }

        blueT = 0;
        i = 0;

        while(i < code.length) {
            if (this.equal(codeAux[i], 0-1)) {
                _continue = true;
            }else{
                _continue = false;
            }
            if(!_continue){
                j = 0;
                while(j < code.length) {
                    if (this.equal(numbers[j], 0-1)) {
                        _continue = true;
                    }else{
                        _continue = false;
                    }
                    if(!_continue){
                        if(this.equal(codeAux[i],numbers[j])) {
                            blueT = blueT + 1;
                            codeAux[i] = 0-1;
                            numbers[j] = 0-1;
                        }else{}
                    }else{}
                    j = j + 1;
                }
            }else{}
            i = i + 1;
        }

        res = new int[2];
        res[0] = redT;
        res[1] = blueT;
        return res;
    }
}